{
  "nodes": [
    {
      "id": "memoryVectorStore_0",
      "position": {
        "x": -38.005951649531596,
        "y": 357.56238957854333
      },
      "type": "customNode",
      "data": {
        "id": "memoryVectorStore_0",
        "label": "In-Memory Vector Store",
        "version": 1,
        "name": "memoryVectorStore",
        "type": "Memory",
        "baseClasses": [
          "Memory",
          "VectorStoreRetriever",
          "BaseRetriever"
        ],
        "category": "Vector Stores",
        "description": "In-memory vectorstore that stores embeddings and does an exact, linear search for the most similar embeddings.",
        "inputParams": [
          {
            "label": "Top K",
            "name": "topK",
            "description": "Number of top results to fetch. Default to 4",
            "placeholder": "4",
            "type": "number",
            "optional": true,
            "id": "memoryVectorStore_0-input-topK-number"
          }
        ],
        "inputAnchors": [
          {
            "label": "Document",
            "name": "document",
            "type": "Document",
            "list": true,
            "optional": true,
            "id": "memoryVectorStore_0-input-document-Document"
          },
          {
            "label": "Embeddings",
            "name": "embeddings",
            "type": "Embeddings",
            "id": "memoryVectorStore_0-input-embeddings-Embeddings"
          }
        ],
        "inputs": {
          "document": [
            "{{cheerioWebScraper_1.data.instance}}",
            "{{cheerioWebScraper_0.data.instance}}"
          ],
          "embeddings": "{{mistralAIEmbeddings_0.data.instance}}",
          "topK": "3"
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
                "name": "retriever",
                "label": "Memory Retriever",
                "description": "",
                "type": "Memory | VectorStoreRetriever | BaseRetriever"
              },
              {
                "id": "memoryVectorStore_0-output-vectorStore-Memory|VectorStore",
                "name": "vectorStore",
                "label": "Memory Vector Store",
                "description": "",
                "type": "Memory | VectorStore"
              }
            ],
            "default": "retriever"
          }
        ],
        "outputs": {
          "output": "retriever"
        },
        "selected": false
      },
      "width": 300,
      "height": 407,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -38.005951649531596,
        "y": 357.56238957854333
      }
    },
    {
      "id": "htmlToMarkdownTextSplitter_0",
      "position": {
        "x": -1447.0676588390816,
        "y": 356.3979493855355
      },
      "type": "customNode",
      "data": {
        "id": "htmlToMarkdownTextSplitter_0",
        "label": "HtmlToMarkdown Text Splitter",
        "version": 1,
        "name": "htmlToMarkdownTextSplitter",
        "type": "HtmlToMarkdownTextSplitter",
        "baseClasses": [
          "HtmlToMarkdownTextSplitter",
          "MarkdownTextSplitter",
          "RecursiveCharacterTextSplitter",
          "TextSplitter",
          "BaseDocumentTransformer",
          "Runnable"
        ],
        "category": "Text Splitters",
        "description": "Converts Html to Markdown and then split your content into documents based on the Markdown headers",
        "inputParams": [
          {
            "label": "Chunk Size",
            "name": "chunkSize",
            "type": "number",
            "description": "Number of characters in each chunk. Default is 1000.",
            "default": 1000,
            "optional": true,
            "id": "htmlToMarkdownTextSplitter_0-input-chunkSize-number"
          },
          {
            "label": "Chunk Overlap",
            "name": "chunkOverlap",
            "type": "number",
            "description": "Number of characters to overlap between chunks. Default is 200.",
            "default": 200,
            "optional": true,
            "id": "htmlToMarkdownTextSplitter_0-input-chunkOverlap-number"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "chunkSize": "2000",
          "chunkOverlap": 200
        },
        "outputAnchors": [
          {
            "id": "htmlToMarkdownTextSplitter_0-output-htmlToMarkdownTextSplitter-HtmlToMarkdownTextSplitter|MarkdownTextSplitter|RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
            "name": "htmlToMarkdownTextSplitter",
            "label": "HtmlToMarkdownTextSplitter",
            "description": "Converts Html to Markdown and then split your content into documents based on the Markdown headers",
            "type": "HtmlToMarkdownTextSplitter | MarkdownTextSplitter | RecursiveCharacterTextSplitter | TextSplitter | BaseDocumentTransformer | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 378,
      "selected": false,
      "positionAbsolute": {
        "x": -1447.0676588390816,
        "y": 356.3979493855355
      },
      "dragging": false
    },
    {
      "id": "cheerioWebScraper_0",
      "position": {
        "x": -1012.9445049616487,
        "y": 398.3066833116974
      },
      "type": "customNode",
      "data": {
        "id": "cheerioWebScraper_0",
        "label": "Cheerio Web Scraper",
        "version": 1.1,
        "name": "cheerioWebScraper",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from webpages",
        "inputParams": [
          {
            "label": "URL",
            "name": "url",
            "type": "string",
            "id": "cheerioWebScraper_0-input-url-string"
          },
          {
            "label": "Get Relative Links Method",
            "name": "relativeLinksMethod",
            "type": "options",
            "description": "Select a method to retrieve relative links",
            "options": [
              {
                "label": "Web Crawl",
                "name": "webCrawl",
                "description": "Crawl relative links from HTML URL"
              },
              {
                "label": "Scrape XML Sitemap",
                "name": "scrapeXMLSitemap",
                "description": "Scrape relative links from XML sitemap URL"
              }
            ],
            "default": "webCrawl",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_0-input-relativeLinksMethod-options"
          },
          {
            "label": "Get Relative Links Limit",
            "name": "limit",
            "type": "number",
            "optional": true,
            "default": "10",
            "additionalParams": true,
            "description": "Only used when \"Get Relative Links Method\" is selected. Set 0 to retrieve all relative links, default limit is 10.",
            "warning": "Retrieving all links might take long time, and all links will be upserted again if the flow's state changed (eg: different URL, chunk size, etc)",
            "id": "cheerioWebScraper_0-input-limit-number"
          },
          {
            "label": "Selector (CSS)",
            "name": "selector",
            "type": "string",
            "description": "Specify a CSS selector to select the content to be extracted",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_0-input-selector-string"
          },
          {
            "label": "Additional Metadata",
            "name": "metadata",
            "type": "json",
            "description": "Additional metadata to be added to the extracted documents",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_0-input-metadata-json"
          },
          {
            "label": "Omit Metadata Keys",
            "name": "omitMetadataKeys",
            "type": "string",
            "rows": 4,
            "description": "Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma",
            "placeholder": "key1, key2, key3.nestedKey1",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_0-input-omitMetadataKeys-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "cheerioWebScraper_0-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "url": "https://guidatv.quotidiano.net/rai_1/",
          "textSplitter": "{{htmlToMarkdownTextSplitter_0.data.instance}}",
          "relativeLinksMethod": "webCrawl",
          "limit": "1",
          "selector": "#js-main-column > div > div.channels > section > div",
          "metadata": "{\"channel\":\"RAI 1\",\"date\":\"Today\"}",
          "omitMetadataKeys": "",
          "selectedLinks": [
            "https://guidatv.quotidiano.net/rai_1"
          ]
        },
        "outputAnchors": [
          {
            "id": "cheerioWebScraper_0-output-cheerioWebScraper-Document",
            "name": "cheerioWebScraper",
            "label": "Document",
            "description": "Load data from webpages",
            "type": "Document"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 427,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -1012.9445049616487,
        "y": 398.3066833116974
      }
    },
    {
      "id": "cheerioWebScraper_1",
      "position": {
        "x": -511.62125467182364,
        "y": 349.8743983234335
      },
      "type": "customNode",
      "data": {
        "id": "cheerioWebScraper_1",
        "label": "Cheerio Web Scraper",
        "version": 1.1,
        "name": "cheerioWebScraper",
        "type": "Document",
        "baseClasses": [
          "Document"
        ],
        "category": "Document Loaders",
        "description": "Load data from webpages",
        "inputParams": [
          {
            "label": "URL",
            "name": "url",
            "type": "string",
            "id": "cheerioWebScraper_1-input-url-string"
          },
          {
            "label": "Get Relative Links Method",
            "name": "relativeLinksMethod",
            "type": "options",
            "description": "Select a method to retrieve relative links",
            "options": [
              {
                "label": "Web Crawl",
                "name": "webCrawl",
                "description": "Crawl relative links from HTML URL"
              },
              {
                "label": "Scrape XML Sitemap",
                "name": "scrapeXMLSitemap",
                "description": "Scrape relative links from XML sitemap URL"
              }
            ],
            "default": "webCrawl",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_1-input-relativeLinksMethod-options"
          },
          {
            "label": "Get Relative Links Limit",
            "name": "limit",
            "type": "number",
            "optional": true,
            "default": "10",
            "additionalParams": true,
            "description": "Only used when \"Get Relative Links Method\" is selected. Set 0 to retrieve all relative links, default limit is 10.",
            "warning": "Retrieving all links might take long time, and all links will be upserted again if the flow's state changed (eg: different URL, chunk size, etc)",
            "id": "cheerioWebScraper_1-input-limit-number"
          },
          {
            "label": "Selector (CSS)",
            "name": "selector",
            "type": "string",
            "description": "Specify a CSS selector to select the content to be extracted",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_1-input-selector-string"
          },
          {
            "label": "Additional Metadata",
            "name": "metadata",
            "type": "json",
            "description": "Additional metadata to be added to the extracted documents",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_1-input-metadata-json"
          },
          {
            "label": "Omit Metadata Keys",
            "name": "omitMetadataKeys",
            "type": "string",
            "rows": 4,
            "description": "Each document loader comes with a default set of metadata keys that are extracted from the document. You can use this field to omit some of the default metadata keys. The value should be a list of keys, seperated by comma",
            "placeholder": "key1, key2, key3.nestedKey1",
            "optional": true,
            "additionalParams": true,
            "id": "cheerioWebScraper_1-input-omitMetadataKeys-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Text Splitter",
            "name": "textSplitter",
            "type": "TextSplitter",
            "optional": true,
            "id": "cheerioWebScraper_1-input-textSplitter-TextSplitter"
          }
        ],
        "inputs": {
          "url": "https://www.arte.tv/fr/guide/",
          "textSplitter": "{{htmlToMarkdownTextSplitter_0.data.instance}}",
          "relativeLinksMethod": "webCrawl",
          "limit": "1",
          "selector": "#__next > div > main > div.ds-z7yiqf > section:nth-child(3)",
          "metadata": "{\"channel\":\"Arte TV\",\"date\":\"Today\"}",
          "omitMetadataKeys": "",
          "selectedLinks": [
            "https://www.arte.tv/fr/guide"
          ]
        },
        "outputAnchors": [
          {
            "id": "cheerioWebScraper_1-output-cheerioWebScraper-Document",
            "name": "cheerioWebScraper",
            "label": "Document",
            "description": "Load data from webpages",
            "type": "Document"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 427,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -511.62125467182364,
        "y": 349.8743983234335
      }
    },
    {
      "id": "chatMistralAI_0",
      "position": {
        "x": -331.81263429954896,
        "y": 846.5751088039901
      },
      "type": "customNode",
      "data": {
        "id": "chatMistralAI_0",
        "label": "ChatMistralAI",
        "version": 3,
        "name": "chatMistralAI",
        "type": "ChatMistralAI",
        "baseClasses": [
          "ChatMistralAI",
          "BaseChatModel",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "Chat Models",
        "description": "Wrapper around Mistral large language models that use the Chat endpoint",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "mistralAIApi"
            ],
            "id": "chatMistralAI_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "mistral-tiny",
            "id": "chatMistralAI_0-input-modelName-asyncOptions"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "description": "What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
            "step": 0.1,
            "default": 0.9,
            "optional": true,
            "id": "chatMistralAI_0-input-temperature-number"
          },
          {
            "label": "Max Output Tokens",
            "name": "maxOutputTokens",
            "type": "number",
            "description": "The maximum number of tokens to generate in the completion.",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatMistralAI_0-input-maxOutputTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "description": "Nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatMistralAI_0-input-topP-number"
          },
          {
            "label": "Random Seed",
            "name": "randomSeed",
            "type": "number",
            "description": "The seed to use for random sampling. If set, different calls will generate deterministic results.",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatMistralAI_0-input-randomSeed-number"
          },
          {
            "label": "Safe Mode",
            "name": "safeMode",
            "type": "boolean",
            "description": "Whether to inject a safety prompt before all conversations.",
            "optional": true,
            "additionalParams": true,
            "id": "chatMistralAI_0-input-safeMode-boolean"
          },
          {
            "label": "Override Endpoint",
            "name": "overrideEndpoint",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatMistralAI_0-input-overrideEndpoint-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "chatMistralAI_0-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "",
          "modelName": "mistral-large-latest",
          "temperature": "0",
          "maxOutputTokens": "",
          "topP": "",
          "randomSeed": "",
          "safeMode": "",
          "overrideEndpoint": ""
        },
        "outputAnchors": [
          {
            "id": "chatMistralAI_0-output-chatMistralAI-ChatMistralAI|BaseChatModel|BaseLanguageModel|Runnable",
            "name": "chatMistralAI",
            "label": "ChatMistralAI",
            "description": "Wrapper around Mistral large language models that use the Chat endpoint",
            "type": "ChatMistralAI | BaseChatModel | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 574,
      "selected": false,
      "positionAbsolute": {
        "x": -331.81263429954896,
        "y": 846.5751088039901
      },
      "dragging": false
    },
    {
      "id": "mistralAIEmbeddings_0",
      "position": {
        "x": -884.6408065207373,
        "y": 937.7432635211685
      },
      "type": "customNode",
      "data": {
        "id": "mistralAIEmbeddings_0",
        "label": "MistralAI Embeddings",
        "version": 2,
        "name": "mistralAIEmbeddings",
        "type": "MistralAIEmbeddings",
        "baseClasses": [
          "MistralAIEmbeddings",
          "Embeddings"
        ],
        "category": "Embeddings",
        "description": "MistralAI API to generate embeddings for a given text",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "mistralAIApi"
            ],
            "id": "mistralAIEmbeddings_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "mistral-embed",
            "id": "mistralAIEmbeddings_0-input-modelName-asyncOptions"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "step": 1,
            "default": 512,
            "optional": true,
            "additionalParams": true,
            "id": "mistralAIEmbeddings_0-input-batchSize-number"
          },
          {
            "label": "Strip New Lines",
            "name": "stripNewLines",
            "type": "boolean",
            "default": true,
            "optional": true,
            "additionalParams": true,
            "id": "mistralAIEmbeddings_0-input-stripNewLines-boolean"
          },
          {
            "label": "Override Endpoint",
            "name": "overrideEndpoint",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "mistralAIEmbeddings_0-input-overrideEndpoint-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "modelName": "mistral-embed",
          "batchSize": 512,
          "stripNewLines": true,
          "overrideEndpoint": ""
        },
        "outputAnchors": [
          {
            "id": "mistralAIEmbeddings_0-output-mistralAIEmbeddings-MistralAIEmbeddings|Embeddings",
            "name": "mistralAIEmbeddings",
            "label": "MistralAIEmbeddings",
            "description": "MistralAI API to generate embeddings for a given text",
            "type": "MistralAIEmbeddings | Embeddings"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 425,
      "selected": false,
      "positionAbsolute": {
        "x": -884.6408065207373,
        "y": 937.7432635211685
      },
      "dragging": false
    },
    {
      "id": "retrieverTool_0",
      "position": {
        "x": 473.18277437340953,
        "y": 586.6488804613961
      },
      "type": "customNode",
      "data": {
        "id": "retrieverTool_0",
        "label": "Retriever Tool",
        "version": 2,
        "name": "retrieverTool",
        "type": "RetrieverTool",
        "baseClasses": [
          "RetrieverTool",
          "DynamicTool",
          "Tool",
          "StructuredTool",
          "Runnable"
        ],
        "category": "Tools",
        "description": "Use a retriever as allowed tool for agent",
        "inputParams": [
          {
            "label": "Retriever Name",
            "name": "name",
            "type": "string",
            "placeholder": "search_state_of_union",
            "id": "retrieverTool_0-input-name-string"
          },
          {
            "label": "Retriever Description",
            "name": "description",
            "type": "string",
            "description": "When should agent uses to retrieve documents",
            "rows": 3,
            "placeholder": "Searches and returns documents regarding the state-of-the-union.",
            "id": "retrieverTool_0-input-description-string"
          },
          {
            "label": "Return Source Documents",
            "name": "returnSourceDocuments",
            "type": "boolean",
            "optional": true,
            "id": "retrieverTool_0-input-returnSourceDocuments-boolean"
          }
        ],
        "inputAnchors": [
          {
            "label": "Retriever",
            "name": "retriever",
            "type": "BaseRetriever",
            "id": "retrieverTool_0-input-retriever-BaseRetriever"
          }
        ],
        "inputs": {
          "name": "tv_schedule_retriever",
          "description": "Searches and returns documents regarding tv schedules i.e. times of series, shows or movies",
          "retriever": "{{memoryVectorStore_0.data.instance}}",
          "returnSourceDocuments": false
        },
        "outputAnchors": [
          {
            "id": "retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable",
            "name": "retrieverTool",
            "label": "RetrieverTool",
            "description": "Use a retriever as allowed tool for agent",
            "type": "RetrieverTool | DynamicTool | Tool | StructuredTool | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 604,
      "selected": false,
      "positionAbsolute": {
        "x": 473.18277437340953,
        "y": 586.6488804613961
      },
      "dragging": false
    },
    {
      "id": "toolAgent_0",
      "position": {
        "x": 1194.769020220013,
        "y": 728.2504824689288
      },
      "type": "customNode",
      "data": {
        "id": "toolAgent_0",
        "label": "Tool Agent",
        "version": 1,
        "name": "toolAgent",
        "type": "AgentExecutor",
        "baseClasses": [
          "AgentExecutor",
          "BaseChain",
          "Runnable"
        ],
        "category": "Agents",
        "description": "Agent that uses Function Calling to pick the tools and args to call",
        "inputParams": [
          {
            "label": "System Message",
            "name": "systemMessage",
            "type": "string",
            "default": "You are a helpful AI assistant.",
            "rows": 4,
            "optional": true,
            "additionalParams": true,
            "id": "toolAgent_0-input-systemMessage-string"
          },
          {
            "label": "Max Iterations",
            "name": "maxIterations",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "toolAgent_0-input-maxIterations-number"
          }
        ],
        "inputAnchors": [
          {
            "label": "Tools",
            "name": "tools",
            "type": "Tool",
            "list": true,
            "id": "toolAgent_0-input-tools-Tool"
          },
          {
            "label": "Memory",
            "name": "memory",
            "type": "BaseChatMemory",
            "id": "toolAgent_0-input-memory-BaseChatMemory"
          },
          {
            "label": "Tool Calling Chat Model",
            "name": "model",
            "type": "BaseChatModel",
            "description": "Only compatible with models that are capable of function calling. ChatOpenAI, ChatMistral, ChatAnthropic, ChatVertexAI",
            "id": "toolAgent_0-input-model-BaseChatModel"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "toolAgent_0-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "tools": [
            "{{retrieverTool_0.data.instance}}"
          ],
          "memory": "{{bufferMemory_0.data.instance}}",
          "model": "{{chatMistralAI_0.data.instance}}",
          "systemMessage": "You are a helpful TV Schedule AI assistant. You retrieve TV listings for the TV station and the time of day specified by the user. Before responding  look at TV listings times to assess whether they meet the time of day requested by the user. Make sure to look up the correct TV station before responding.",
          "inputModeration": "",
          "maxIterations": ""
        },
        "outputAnchors": [
          {
            "id": "toolAgent_0-output-toolAgent-AgentExecutor|BaseChain|Runnable",
            "name": "toolAgent",
            "label": "AgentExecutor",
            "description": "Agent that uses Function Calling to pick the tools and args to call",
            "type": "AgentExecutor | BaseChain | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 436,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 1194.769020220013,
        "y": 728.2504824689288
      }
    },
    {
      "id": "bufferMemory_0",
      "position": {
        "x": 793.2411898698869,
        "y": 343.79243427861456
      },
      "type": "customNode",
      "data": {
        "id": "bufferMemory_0",
        "label": "Buffer Memory",
        "version": 2,
        "name": "bufferMemory",
        "type": "BufferMemory",
        "baseClasses": [
          "BufferMemory",
          "BaseChatMemory",
          "BaseMemory"
        ],
        "category": "Memory",
        "description": "Retrieve chat messages stored in database",
        "inputParams": [
          {
            "label": "Session Id",
            "name": "sessionId",
            "type": "string",
            "description": "If not specified, a random id will be used. Learn <a target=\"_blank\" href=\"https://docs.flowiseai.com/memory#ui-and-embedded-chat\">more</a>",
            "default": "",
            "additionalParams": true,
            "optional": true,
            "id": "bufferMemory_0-input-sessionId-string"
          },
          {
            "label": "Memory Key",
            "name": "memoryKey",
            "type": "string",
            "default": "chat_history",
            "additionalParams": true,
            "id": "bufferMemory_0-input-memoryKey-string"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "sessionId": "",
          "memoryKey": "chat_history"
        },
        "outputAnchors": [
          {
            "id": "bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory",
            "name": "bufferMemory",
            "label": "BufferMemory",
            "description": "Retrieve chat messages stored in database",
            "type": "BufferMemory | BaseChatMemory | BaseMemory"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 253,
      "selected": false,
      "positionAbsolute": {
        "x": 793.2411898698869,
        "y": 343.79243427861456
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "htmlToMarkdownTextSplitter_0",
      "sourceHandle": "htmlToMarkdownTextSplitter_0-output-htmlToMarkdownTextSplitter-HtmlToMarkdownTextSplitter|MarkdownTextSplitter|RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
      "target": "cheerioWebScraper_1",
      "targetHandle": "cheerioWebScraper_1-input-textSplitter-TextSplitter",
      "type": "buttonedge",
      "id": "htmlToMarkdownTextSplitter_0-htmlToMarkdownTextSplitter_0-output-htmlToMarkdownTextSplitter-HtmlToMarkdownTextSplitter|MarkdownTextSplitter|RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-cheerioWebScraper_1-cheerioWebScraper_1-input-textSplitter-TextSplitter"
    },
    {
      "source": "cheerioWebScraper_1",
      "sourceHandle": "cheerioWebScraper_1-output-cheerioWebScraper-Document",
      "target": "memoryVectorStore_0",
      "targetHandle": "memoryVectorStore_0-input-document-Document",
      "type": "buttonedge",
      "id": "cheerioWebScraper_1-cheerioWebScraper_1-output-cheerioWebScraper-Document-memoryVectorStore_0-memoryVectorStore_0-input-document-Document"
    },
    {
      "source": "cheerioWebScraper_0",
      "sourceHandle": "cheerioWebScraper_0-output-cheerioWebScraper-Document",
      "target": "memoryVectorStore_0",
      "targetHandle": "memoryVectorStore_0-input-document-Document",
      "type": "buttonedge",
      "id": "cheerioWebScraper_0-cheerioWebScraper_0-output-cheerioWebScraper-Document-memoryVectorStore_0-memoryVectorStore_0-input-document-Document"
    },
    {
      "source": "htmlToMarkdownTextSplitter_0",
      "sourceHandle": "htmlToMarkdownTextSplitter_0-output-htmlToMarkdownTextSplitter-HtmlToMarkdownTextSplitter|MarkdownTextSplitter|RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable",
      "target": "cheerioWebScraper_0",
      "targetHandle": "cheerioWebScraper_0-input-textSplitter-TextSplitter",
      "type": "buttonedge",
      "id": "htmlToMarkdownTextSplitter_0-htmlToMarkdownTextSplitter_0-output-htmlToMarkdownTextSplitter-HtmlToMarkdownTextSplitter|MarkdownTextSplitter|RecursiveCharacterTextSplitter|TextSplitter|BaseDocumentTransformer|Runnable-cheerioWebScraper_0-cheerioWebScraper_0-input-textSplitter-TextSplitter"
    },
    {
      "source": "mistralAIEmbeddings_0",
      "sourceHandle": "mistralAIEmbeddings_0-output-mistralAIEmbeddings-MistralAIEmbeddings|Embeddings",
      "target": "memoryVectorStore_0",
      "targetHandle": "memoryVectorStore_0-input-embeddings-Embeddings",
      "type": "buttonedge",
      "id": "mistralAIEmbeddings_0-mistralAIEmbeddings_0-output-mistralAIEmbeddings-MistralAIEmbeddings|Embeddings-memoryVectorStore_0-memoryVectorStore_0-input-embeddings-Embeddings"
    },
    {
      "source": "memoryVectorStore_0",
      "sourceHandle": "memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever",
      "target": "retrieverTool_0",
      "targetHandle": "retrieverTool_0-input-retriever-BaseRetriever",
      "type": "buttonedge",
      "id": "memoryVectorStore_0-memoryVectorStore_0-output-retriever-Memory|VectorStoreRetriever|BaseRetriever-retrieverTool_0-retrieverTool_0-input-retriever-BaseRetriever"
    },
    {
      "source": "retrieverTool_0",
      "sourceHandle": "retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable",
      "target": "toolAgent_0",
      "targetHandle": "toolAgent_0-input-tools-Tool",
      "type": "buttonedge",
      "id": "retrieverTool_0-retrieverTool_0-output-retrieverTool-RetrieverTool|DynamicTool|Tool|StructuredTool|Runnable-toolAgent_0-toolAgent_0-input-tools-Tool"
    },
    {
      "source": "chatMistralAI_0",
      "sourceHandle": "chatMistralAI_0-output-chatMistralAI-ChatMistralAI|BaseChatModel|BaseLanguageModel|Runnable",
      "target": "toolAgent_0",
      "targetHandle": "toolAgent_0-input-model-BaseChatModel",
      "type": "buttonedge",
      "id": "chatMistralAI_0-chatMistralAI_0-output-chatMistralAI-ChatMistralAI|BaseChatModel|BaseLanguageModel|Runnable-toolAgent_0-toolAgent_0-input-model-BaseChatModel"
    },
    {
      "source": "bufferMemory_0",
      "sourceHandle": "bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory",
      "target": "toolAgent_0",
      "targetHandle": "toolAgent_0-input-memory-BaseChatMemory",
      "type": "buttonedge",
      "id": "bufferMemory_0-bufferMemory_0-output-bufferMemory-BufferMemory|BaseChatMemory|BaseMemory-toolAgent_0-toolAgent_0-input-memory-BaseChatMemory"
    }
  ]
}